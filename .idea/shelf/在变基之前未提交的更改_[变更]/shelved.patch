Index: smart-post/src/main/java/cn/goroute/smart/post/service/impl/PostServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.goroute.smart.post.service.impl;\r\n\r\n\r\nimport cn.goroute.smart.common.constant.PostConstant;\r\nimport cn.goroute.smart.common.constant.RedisKeyConstant;\r\nimport cn.goroute.smart.common.dao.*;\r\nimport cn.goroute.smart.common.entity.dto.MemberDTO;\r\nimport cn.goroute.smart.common.entity.dto.PostDTO;\r\nimport cn.goroute.smart.common.entity.dto.PostListDTO;\r\nimport cn.goroute.smart.common.entity.pojo.Category;\r\nimport cn.goroute.smart.common.entity.pojo.Post;\r\nimport cn.goroute.smart.common.entity.pojo.PostTag;\r\nimport cn.goroute.smart.common.entity.pojo.Tag;\r\nimport cn.goroute.smart.common.entity.vo.PostQueryVO;\r\nimport cn.goroute.smart.common.entity.vo.PostVO;\r\nimport cn.goroute.smart.common.feign.MemberFeignService;\r\nimport cn.goroute.smart.common.service.AuthService;\r\nimport cn.goroute.smart.common.utils.*;\r\nimport cn.goroute.smart.post.feign.SearchFeignService;\r\nimport cn.goroute.smart.post.manage.IPostManage;\r\nimport cn.goroute.smart.post.service.PostService;\r\nimport cn.goroute.smart.post.util.Html2TextUtil;\r\nimport cn.goroute.smart.post.util.NamingThreadFactory;\r\nimport cn.goroute.smart.post.util.RabbitmqUtil;\r\nimport cn.hutool.core.collection.CollUtil;\r\nimport cn.hutool.core.text.CharSequenceUtil;\r\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\r\nimport com.baomidou.mybatisplus.core.metadata.IPage;\r\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\r\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.BeanUtils;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport javax.annotation.Resource;\r\nimport java.util.*;\r\nimport java.util.concurrent.ArrayBlockingQueue;\r\nimport java.util.concurrent.CountDownLatch;\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\n@Service(\"postService\")\r\n@Slf4j\r\npublic class PostServiceImpl extends ServiceImpl<PostDao, Post> implements PostService {\r\n\r\n    @Resource\r\n    MemberFeignService memberFeignService;\r\n\r\n    @Resource\r\n    SearchFeignService searchFeignService;\r\n\r\n    @Autowired\r\n    RabbitmqUtil rabbitmqUtil;\r\n\r\n    @Autowired\r\n    TagDao tagDao;\r\n\r\n    @Autowired\r\n    CategoryDao categoryDao;\r\n\r\n    @Autowired\r\n    PostDao postDao;\r\n\r\n    @Autowired\r\n    PostTagDao postTagDao;\r\n\r\n    @Autowired\r\n    CommentDao commentDao;\r\n\r\n    @Autowired\r\n    RedisTemplate<Object, Object> redisTemplate;\r\n\r\n    @Autowired\r\n    RedisUtil redisUtil;\r\n\r\n    @Autowired\r\n    CollectDao collectDao;\r\n\r\n    @Autowired\r\n    IPostManage iPostManage;\r\n\r\n    @Autowired\r\n    AuthService authService;\r\n\r\n    private static final int CORE_SIZE = Runtime.getRuntime().availableProcessors();\r\n\r\n    /**\r\n     * 文章分页方法\r\n     *\r\n     * @param postQueryVO 分页参数\r\n     * @return 文章分页对象\r\n     */\r\n    @Override\r\n    public Result queryPage(PostQueryVO postQueryVO) {\r\n\r\n        List<Post> post = postDao.getPost();\r\n\r\n        IPage<Post> page;\r\n\r\n        // 查询条件 如果没有选择分类，则查询全部\r\n        if (postQueryVO.getCategoryUid() == null) {\r\n            page = postDao.selectPage(\r\n                    new Query<Post>().getPage(postQueryVO),\r\n                    new LambdaQueryWrapper<Post>()\r\n                            .eq(Post::getIsPublish, PostConstant.PUBLISH)\r\n                            .eq(Post::getStatus, PostConstant.NORMAL_STATUS));\r\n            // 如果选择了分类，没有选择标签，则查询分类下的文章\r\n        } else if (postQueryVO.getTagUid() == null) {\r\n\r\n            page = postDao.selectPage(\r\n                    new Query<Post>().getPage(postQueryVO),\r\n                    new LambdaQueryWrapper<Post>()\r\n                            .eq(Post::getCategoryUid, postQueryVO.getCategoryUid())\r\n                            .eq(Post::getStatus, PostConstant.NORMAL_STATUS)\r\n            );\r\n        } else {\r\n            // 如果选择了分类和标签，则查询分类和标签下的文章\r\n            IPage<PostTag> postTagIPage = postTagDao.selectPage(new Query<PostTag>().getPage(postQueryVO),\r\n                    new LambdaQueryWrapper<PostTag>()\r\n                            .eq(PostTag::getTagUid, postQueryVO.getTagUid()));\r\n\r\n            List<PostTag> records = postTagIPage.getRecords();\r\n            if (CollUtil.isEmpty(records)) {\r\n                return Result.ok().put(\"data\", new Page<>());\r\n            }\r\n            List<Long> postIds = records.stream()\r\n                    .map(PostTag::getPostUid).collect(Collectors.toList());\r\n\r\n            List<Post> posts = postDao.selectBatchIds(postIds);\r\n            BeanUtils.copyProperties(postTagIPage, page = new Page<>());\r\n            page.setRecords(posts);\r\n        }\r\n\r\n        boolean isLogin = authService.getIsLogin();\r\n\r\n        List<Post> records = page.getRecords();\r\n\r\n        List<PostListDTO> postList = getPostListDTOS(isLogin, records);\r\n\r\n        PageUtils pageUtils = new PageUtils(page);\r\n\r\n        pageUtils.setList(postList);\r\n\r\n        return Result.ok().put(\"data\", pageUtils);\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取文章列表信息\r\n     *\r\n     * @param isLogin 用户是否登录\r\n     * @param records 文章集合\r\n     * @return List<PostListDTO> 文章DTO集合\r\n     */\r\n    private List<PostListDTO> getPostListDTOS(boolean isLogin, List<Post> records) {\r\n\r\n        List<PostListDTO> postDTOList = new ArrayList<>(records.size());\r\n\r\n        ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(\r\n                CORE_SIZE + 1,\r\n                2 * CORE_SIZE + 1,\r\n                1L,\r\n                TimeUnit.SECONDS,\r\n                123123\r\n                new ArrayBlockingQueue<>(100),\r\n                new NamingThreadFactory(\"post-get-post-list-dto-thread\"));\r\n\r\n        //遍历文章数据并转换为文章DTO\r\n        CountDownLatch countDownLatch = new CountDownLatch(records.size());\r\n        for (Post record : records) {\r\n            Long loginId = authService.getIsLogin() ? authService.getLoginUid() : null;\r\n            poolExecutor.submit(() -> {\r\n                try {\r\n                    getPostInfo(isLogin, postDTOList, record, loginId);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                } finally {\r\n                    // 当线程执行完毕后，计数器减1\r\n                    countDownLatch.countDown();\r\n                }\r\n            });\r\n        }\r\n        try {\r\n            countDownLatch.await();\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        return postDTOList;\r\n    }\r\n\r\n    /**\r\n     * 获取文章的核心方法\r\n     *\r\n     * @param isLogin     用户是否登录\r\n     * @param postDTOList 文章DTO集合\r\n     * @param record      文章对象\r\n     */\r\n    private void getPostInfo(boolean isLogin, List<PostListDTO> postDTOList, Post record, Long loginId) {\r\n        PostListDTO postListDTO = new PostListDTO();\r\n        BeanUtils.copyProperties(record, postListDTO);\r\n        postListDTO.setAuthorInfo(memberFeignService.getMemberByUid(record.getMemberUid()));\r\n        postListDTO.setCommentCount(iPostManage.getCommentCount(record));\r\n        if (isLogin) {\r\n            postListDTO.setIsLike(iPostManage.checkIsThumbOrCollect(record.getUid(), loginId, 0));\r\n            postListDTO.setIsCollect(iPostManage.checkIsThumbOrCollect(record.getUid(), loginId, 1));\r\n        } else {\r\n            postListDTO.setIsLike(false);\r\n            postListDTO.setIsCollect(false);\r\n        }\r\n        postListDTO.setThumbCount(iPostManage.getThumbCount(record));\r\n        postDTOList.add(postListDTO);\r\n    }\r\n\r\n    /**\r\n     * 发布/编辑文章\r\n     *\r\n     * @param postVo 文章vo\r\n     * @return 保存结果\r\n     */\r\n    @Override\r\n    @Transactional(rollbackFor = Exception.class)\r\n    public Result savePost(PostVO postVo) {\r\n        Category category = categoryDao.selectById(postVo.getCategoryUid());\r\n        if (category == null) {\r\n            return Result.error(\"分类不存在\");\r\n        }\r\n\r\n        Set<Long> tagUid = new HashSet<>(postVo.getTagUid());\r\n        if (CollUtil.isEmpty(tagUid)) {\r\n            return Result.error(\"请选择标签\");\r\n        } else {\r\n            List<Tag> tags = tagDao.selectBatchIds(tagUid);\r\n            tags.forEach(tag -> {\r\n                if (tag == null) {\r\n                    throw new RuntimeException(\"标签不存在\");\r\n                }\r\n            });\r\n        }\r\n\r\n        Post post = new Post();\r\n\r\n        //使用正则，过滤掉Html标签\r\n        String htmlContent = postVo.getContentHtml();\r\n        String text = Html2TextUtil.Html2Text(htmlContent);\r\n\r\n        if (CharSequenceUtil.isEmpty(postVo.getSummary())) {\r\n            String summary = CharSequenceUtil.sub(text, 0, 150);\r\n            post.setSummary(summary);\r\n        } else {\r\n            post.setSummary(postVo.getSummary());\r\n        }\r\n\r\n        post.setIsPublish(Boolean.TRUE.equals(postVo.getIsPublish()) ? PostConstant.PUBLISH : PostConstant.NOT_PUBLISH);\r\n        post.setTitle(postVo.getTitle());\r\n        post.setContent(postVo.getContent());\r\n        post.setCategoryUid(postVo.getCategoryUid());\r\n        post.setMemberUid(authService.getLoginUid());\r\n        post.setStatus(PostConstant.CHECK_STATUS);\r\n\r\n        int result = -1;\r\n        // 如果是编辑，则先删除原有的标签\r\n        if (Objects.equals(postVo.getType(), PostConstant.POST_SAVE_TYPE_EDIT)) {\r\n            postTagDao.delete(new LambdaQueryWrapper<PostTag>().eq(PostTag::getPostUid, postVo.getUid()));\r\n            post.setUid(postVo.getUid());\r\n            result = postDao.updateById(post);\r\n        } else if (Objects.equals(postVo.getType(), PostConstant.POST_SAVE_TYPE_NEW)) {\r\n            // 新增文章\r\n            result = postDao.insert(post);\r\n        }\r\n\r\n        if (result == 1) {\r\n            //插入后通过消息队列对文章进行异步审核\r\n            rabbitmqUtil.reviewPost(post, new ArrayList<>(tagUid), Objects.equals(postVo.getType(), PostConstant.POST_SAVE_TYPE_EDIT));\r\n            log.info(\"返回文章的ID为：{}\", post.getUid());\r\n            return Result.ok().put(\"url\", post.getUid());\r\n        } else {\r\n            log.error(\"用户={}发布文章失败,文章对象为={}\", authService.getLoginUid(), postVo);\r\n            return Result.error(\"发布文章失败\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取文章根据文章uid\r\n     *\r\n     * @param uid 文章uid\r\n     * @return 文章信息\r\n     */\r\n    @Override\r\n    public Result getPostByUid(Long uid) {\r\n\r\n        boolean isLogin = authService.getIsLogin();\r\n\r\n        String key = RedisKeyConstant.POST_CACHE_KEY + uid;\r\n        Post post;\r\n\r\n        if (redisUtil.hasKey(key)) {\r\n            return Result.error(\"没有该文章\");\r\n        }\r\n        post = postDao.selectById(uid);\r\n        // 防止缓存穿透\r\n        if (post == null) {\r\n            redisUtil.set(key, null, 60L * 60 * 3);\r\n            return Result.error(\"没有该文章\");\r\n        }\r\n\r\n        if (!isLogin || !Objects.equals(post.getMemberUid(), authService.getLoginUid())) {\r\n            if (Objects.equals(post.getIsPublish(), PostConstant.NOT_PUBLISH)) {\r\n                return Result.error(\"该文章已设置私有\");\r\n            }\r\n            if (!Objects.equals(post.getStatus(), PostConstant.NORMAL_STATUS)) {\r\n                return Result.error(\"该文章由于其他原因不可展示\");\r\n            }\r\n        }\r\n\r\n        List<MemberDTO> memberInfoWithPost = memberFeignService\r\n                .batchQueryUsers(CollUtil.toList(post.getMemberUid()));\r\n\r\n        PostDTO postDTO = new PostDTO();\r\n        BeanUtils.copyProperties(post, postDTO);\r\n\r\n        // 获取文章的标签\r\n        List<PostTag> tags = postTagDao.selectList(new LambdaQueryWrapper<PostTag>().eq(PostTag::getPostUid, uid));\r\n\r\n        List<Long> tagUid = tags.stream().map(PostTag::getTagUid).collect(Collectors.toList());\r\n\r\n        postDTO.setTagUid(tagUid);\r\n        if (CollUtil.isNotEmpty(memberInfoWithPost)) {\r\n            postDTO.setAuthorInfo(memberInfoWithPost.get(0));\r\n            if (isLogin) {\r\n                postDTO.setIsCollect(iPostManage.checkIsThumbOrCollect(uid, authService.getLoginUid(), 1));\r\n                postDTO.setIsLike(iPostManage.checkIsThumbOrCollect(uid, authService.getLoginUid(), 0));\r\n            } else {\r\n                postDTO.setIsCollect(false);\r\n                postDTO.setIsLike(false);\r\n            }\r\n        }\r\n\r\n        return Objects.requireNonNull(Result.ok().put(\"data\", postDTO));\r\n    }\r\n\r\n    /**\r\n     * 删除文章\r\n     *\r\n     * @param postUid 文章uid\r\n     * @return 删除结果\r\n     */\r\n    @Override\r\n    public Result deletePost(Long postUid) {\r\n        if (postUid == null) {\r\n            return Result.error(\"文章uid不能为空\");\r\n        }\r\n\r\n        Post post = postDao.selectById(postUid);\r\n\r\n        if (!Objects.equals(post.getMemberUid(), authService.getLoginUid())) {\r\n            return Result.error();\r\n        }\r\n\r\n        postDao.deleteById(postUid);\r\n        //调用es接口逻辑删除文章\r\n        searchFeignService.deleteSearchPost(post.getUid());\r\n        return Result.ok();\r\n    }\r\n\r\n    /**\r\n     * 根据用户uid查发布文章\r\n     *\r\n     * @param queryParam 查询参数\r\n     * @return 分页结果\r\n     */\r\n    @Override\r\n    public Result listByMemberUid(QueryParam queryParam) {\r\n\r\n        IPage<Post> page = null;\r\n        if (!authService.getIsLogin() || !Objects.equals(queryParam.getUid(), authService.getLoginUid())) {\r\n            page = this.page(new Query<Post>()\r\n                    .getPage(queryParam), new LambdaQueryWrapper<Post>()\r\n                    .eq(Post::getMemberUid, queryParam.getUid())\r\n                    .eq(Post::getStatus, PostConstant.NORMAL_STATUS)\r\n                    .eq(Post::getIsPublish, PostConstant.PUBLISH));\r\n        } else if (Objects.equals(queryParam.getUid(), authService.getLoginUid())) {\r\n            page = this.page(new Query<Post>()\r\n                    .getPage(queryParam), new LambdaQueryWrapper<Post>()\r\n                    .eq(Post::getMemberUid, queryParam.getUid())\r\n                    .eq(Post::getStatus, PostConstant.NORMAL_STATUS));\r\n        }\r\n\r\n        assert page != null;\r\n        List<Post> postList = page.getRecords();\r\n        if (CollUtil.isEmpty(postList)) {\r\n            return Result.ok().put(\"data\", new PageUtils(page));\r\n        }\r\n        List<PostListDTO> postListDTOs = new ArrayList<>(10);\r\n        MemberDTO memberDTO = memberFeignService.getMemberByUid(queryParam.getUid());\r\n\r\n        postList.forEach(postEntity -> {\r\n            PostListDTO postListDTO = new PostListDTO();\r\n            BeanUtils.copyProperties(postEntity, postListDTO);\r\n            postListDTO.setAuthorInfo(memberDTO);\r\n            postListDTO.setThumbCount(iPostManage.getThumbCount(postEntity));\r\n            if (authService.getIsLogin()) {\r\n                postListDTO.setIsLike(iPostManage.checkIsThumbOrCollect(postEntity.getUid(), authService.getLoginUid(), 0));\r\n                postListDTO.setIsCollect(iPostManage.checkIsThumbOrCollect(postEntity.getUid(), authService.getLoginUid(), 1));\r\n            } else {\r\n                postListDTO.setIsLike(false);\r\n                postListDTO.setIsCollect(false);\r\n            }\r\n            postListDTOs.add(postListDTO);\r\n        });\r\n        IPage<PostListDTO> pagePostListDTO = new Page<>();\r\n        BeanUtils.copyProperties(page, pagePostListDTO);\r\n\r\n        pagePostListDTO.setRecords(postListDTOs);\r\n\r\n        PageUtils pageResult = new PageUtils(pagePostListDTO);\r\n        return Result.ok().put(\"data\", pageResult);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/smart-post/src/main/java/cn/goroute/smart/post/service/impl/PostServiceImpl.java b/smart-post/src/main/java/cn/goroute/smart/post/service/impl/PostServiceImpl.java
--- a/smart-post/src/main/java/cn/goroute/smart/post/service/impl/PostServiceImpl.java	(revision 02788524c24ee7d6c8516feb2032ffb422fa8a56)
+++ b/smart-post/src/main/java/cn/goroute/smart/post/service/impl/PostServiceImpl.java	(date 1655723341405)
@@ -166,7 +166,6 @@
                 2 * CORE_SIZE + 1,
                 1L,
                 TimeUnit.SECONDS,
-                123123
                 new ArrayBlockingQueue<>(100),
                 new NamingThreadFactory("post-get-post-list-dto-thread"));
 
